@model PCGD.Models.ChuongTrinh

@{
    ViewBag.Title = "Thêm Chương Trình";
}

<div class="card">
    <h5 class="card-header">@ViewBag.Title</h5>
    <div class="card-body">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            if (ViewData.ModelState["ThongBaoLoi"] != null && !String.IsNullOrEmpty(ViewData.ModelState["ThongBaoLoi"].Errors[0].ErrorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <span class="d-block text-danger">@ViewData.ModelState["ThongBaoLoi"].Errors[0].ErrorMessage</span>
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            }

            <div class="form-group">
                @Html.LabelFor(model => model.NgayTao)
                @Html.EditorFor(model => model.NgayTao, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.NgayTao, "", new { @class = "invalid-feedback" })
            </div>
            <div class="form-group">
                <label for="HocPhan">Học Phần</label>
                <input id="HocPhan" name="HocPhan">
            </div>
            <div class="text-left">
                <input type="submit" value="Thêm ngay" class="btn btn-primary" /> hoặc trở lại <a class="text-decoration-none" href="@Url.Action("Index")">trang chính</a>
            </div>
        }
    </div>
</div>
<script>
    $(document).ready(function () {
        let inputHocPhan = document.getElementById('HocPhan');
        let tagifyHocPhan = new Tagify(inputHocPhan, {
            enforceWhitelist: true,
            dropdown: {
                enabled: 1,
                searchKeys: ["value"]
            },
            maxTags: 20,
            whitelist: inputHocPhan.value.trim().split(/\s*,\s*/)
        });

        let isFocus = true;

        tagifyHocPhan.on('blur', (e) => {
            isFocus = false;
        });

        tagifyHocPhan.on('input', (e) => {
            let value = e.detail.value, controller;
            isFocus = true;

            if (value == "")
                return false;

            controller && controller.abort();
            controller = new AbortController();
            tagifyHocPhan.loading(true).dropdown.hide.call(tagifyHocPhan);
            $.post("/HocPhan/Search", {
                MaHP: value
            }).done(function (data) {
                if (isFocus === true) {
                    tagifyHocPhan.settings.whitelist = [];
                    tagifyHocPhan.settings.whitelist.splice(0, data.length, ...data);
                    tagifyHocPhan.loading(false).dropdown.show.call(tagifyHocPhan);
                }
            }).fail(function () {
                tagifyHocPhan.loading(false).dropdown.hide.call(tagifyHocPhan);
            });
        });
    });
</script>