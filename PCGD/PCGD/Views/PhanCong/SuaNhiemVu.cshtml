@model PCGD.Models.SuaNhiemVuModel

@{
    ViewBag.Title = "Sửa Nhiệm Vụ";
}

<div class="card">
    <h5 class="card-header">@ViewBag.Title</h5>
    <div class="card-body">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.ID)
            @Html.HiddenFor(model => model.PhanCong_ID)

            if (ViewData.ModelState["ThongBaoLoi"] != null && !String.IsNullOrEmpty(ViewData.ModelState["ThongBaoLoi"].Errors[0].ErrorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <span class="d-block text-danger">@ViewData.ModelState["ThongBaoLoi"].Errors[0].ErrorMessage</span>
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            }

            <div class="form-group">
                @Html.LabelFor(model => model.TenGV)
                @Html.EditorFor(model => model.TenGV, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.TenGV, "", new { @class = "invalid-feedback" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MaHP)
                @Html.EditorFor(model => model.MaHP, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.MaHP, "", new { @class = "invalid-feedback" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TenLop)
                @Html.EditorFor(model => model.TenLop, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.TenLop, "", new { @class = "invalid-feedback" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.LoaiPhong)
                <select id="LoaiPhong" name="LoaiPhong" class="form-control">
                    <option value="0" @if (Model != null && Model.LoaiPhong.Equals(0)) { @Html.Raw("selected") }>Phòng Thường</option>
                    <option value="1" @if (Model != null && Model.LoaiPhong.Equals(1)) { @Html.Raw("selected") }>Phòng Máy Tính</option>
                </select>
                @Html.ValidationMessageFor(model => model.LoaiPhong, "", new { @class = "invalid-feedback" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.NhomLT)
                @Html.EditorFor(model => model.NhomLT, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.NhomLT, "", new { @class = "invalid-feedback" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.NhomHT)
                @Html.EditorFor(model => model.NhomHT, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.NhomHT, "", new { @class = "invalid-feedback" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.GhiChu)
                @Html.EditorFor(model => model.GhiChu, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.GhiChu, "", new { @class = "invalid-feedback" })
            </div>

            <div class="text-left">
                <input type="submit" value="Sửa ngay" class="btn btn-primary" /> hoặc trở lại <a class="text-decoration-none" href="@Url.Action("Details", new { id = Model.PhanCong_ID })">trang chính</a>
            </div>
        }
    </div>
</div>
<script>
    let MaHP = "@Html.Raw(Model.MaHP)", TenGV = "@Html.Raw(Model.TenGV)", TenLop = "@Html.Raw(Model.TenLop)";
    // giảng viên
    let isFocus = true;
    let inputTenGV = document.getElementById('TenGV');
    let tagifyTenGV = new Tagify(inputTenGV, {
        originalInputValueFormat: valuesArr => valuesArr.map(item => item.value).join(','),
        enforceWhitelist: true,
        mode: "select",
        dropdown: {
            enabled: 0,
            maxItems: 100,
            searchKeys: ["value"],
            closeOnSelect: false
        },
        keepInvalidTags: true,
        whitelist: inputTenGV.value.trim().split(/\s*,\s*/)
    });

    tagifyTenGV.on('blur', (e) => {
        isFocus = false;
    });
    tagifyTenGV.on('focus', (e) => {
        let controller;
        isFocus = true;

        controller && controller.abort();
        controller = new AbortController();
        tagifyTenGV.loading(true).dropdown.hide.call(tagifyTenGV);
        let valueInput = inputTenGV.getAttribute("value");
        TenGV = valueInput;
        $.ajax({
            url: '/GiangVien/Search?tengv=' + valueInput + '&mahp=' + MaHP + '&tenlop=' + TenLop,
            type: 'GET',
            success: function (data) {
                if (isFocus === true) {
                    tagifyTenGV.settings.whitelist = [];
                    tagifyTenGV.settings.whitelist.splice(0, data.length, ...data);
                    tagifyTenGV.loading(false).dropdown.show.call(tagifyTenGV);
                }
            },
            error: function () {
                tagifyTenGV.loading(false).dropdown.hide.call(tagifyTenGV);
            }
        });
    });
    tagifyTenGV.on('remove', (e) => {
        TenGV = "";
        inputTenGV.setAttribute("value", "");
    });
    tagifyTenGV.on('input', (e) => {
        let value = e.detail.value, controller;
        TenGV = value;
        inputTenGV.setAttribute("value", value);

        isFocus = true;

        controller && controller.abort();
        controller = new AbortController();
        tagifyTenGV.loading(true).dropdown.hide.call(tagifyTenGV);

        $.ajax({
            url: '/GiangVien/Search?tengv=' + value + '&mahp=' + MaHP + '&tenlop=' + TenLop,
            type: 'GET',
            success: function (data) {
                if (isFocus === true) {
                    tagifyTenGV.settings.whitelist = [];
                    tagifyTenGV.settings.whitelist.splice(0, data.length, ...data);
                    tagifyTenGV.loading(false).dropdown.show.call(tagifyTenGV);
                }
            },
            error: function () {
                tagifyTenGV.loading(false).dropdown.hide.call(tagifyTenGV);
            }
        });
    });
    tagifyTenGV.on('add', (e) => {
        TenGV = e.detail.data.value;
        inputTenGV.setAttribute("value", e.detail.data.value);
    });


    // mã học phần
    let inputMaHP = document.getElementById('MaHP');
    let tagifyMaHP = new Tagify(inputMaHP, {
        originalInputValueFormat: valuesArr => valuesArr.map(item => item.value).join(','),
        enforceWhitelist: true,
        mode: "select",
        dropdown: {
            enabled: 0,
            maxItems: 100,
            searchKeys: ["value"],
            closeOnSelect: false
        },
        keepInvalidTags: true,
        whitelist: inputMaHP.value.trim().split(/\s*,\s*/)
    });

    tagifyMaHP.on('blur', (e) => {
        isFocus = false;
    });
    tagifyMaHP.on('focus', (e) => {
        let controller;
        isFocus = true;

        controller && controller.abort();
        controller = new AbortController();
        tagifyMaHP.loading(true).dropdown.hide.call(tagifyMaHP);
        let valueInput = inputMaHP.getAttribute("value");
        MaHP = valueInput;
        $.ajax({
            url: '/HocPhan/Search?mahp=' + valueInput + '&tengv=' + TenGV + '&tenlop=' + TenLop,
            type: 'GET',
            success: function (data) {
                if (isFocus === true) {
                    tagifyMaHP.settings.whitelist = [];
                    tagifyMaHP.settings.whitelist.splice(0, data.length, ...data);
                    tagifyMaHP.loading(false).dropdown.show.call(tagifyMaHP);
                }
            },
            error: function () {
                tagifyMaHP.loading(false).dropdown.hide.call(tagifyMaHP);
            }
        });
    });
    tagifyMaHP.on('remove', (e) => {
        MaHP = "";
        inputMaHP.setAttribute("value", "");
    });
    tagifyMaHP.on('input', (e) => {
        let value = e.detail.value, controller;
        MaHP = value;
        inputMaHP.setAttribute("value", value);

        isFocus = true;

        controller && controller.abort();
        controller = new AbortController();
        tagifyMaHP.loading(true).dropdown.hide.call(tagifyMaHP);

        $.ajax({
            url: '/HocPhan/Search?mahp=' + value + '&tengv=' + TenGV + '&tenlop=' + TenLop,
            type: 'GET',
            success: function (data) {
                if (isFocus === true) {
                    tagifyMaHP.settings.whitelist = [];
                    tagifyMaHP.settings.whitelist.splice(0, data.length, ...data);
                    tagifyMaHP.loading(false).dropdown.show.call(tagifyMaHP);
                }
            },
            error: function () {
                tagifyMaHP.loading(false).dropdown.hide.call(tagifyMaHP);
            }
        });
    });
    tagifyMaHP.on('add', (e) => {
        MaHP = e.detail.data.value;
        inputMaHP.setAttribute("value", e.detail.data.value);
    });

    // tên lớp
    let inputTenLop = document.getElementById('TenLop');
    let tagifyTenLop = new Tagify(inputTenLop, {
        originalInputValueFormat: valuesArr => valuesArr.map(item => item.value).join(','),
        enforceWhitelist: true,
        mode: "select",
        dropdown: {
            enabled: 0,
            maxItems: 100,
            searchKeys: ["value"],
            closeOnSelect: false
        },
        keepInvalidTags: true,
        whitelist: inputTenLop.value.trim().split(/\s*,\s*/)
    });

    tagifyTenLop.on('blur', (e) => {
        isFocus = false;
    });
    tagifyTenLop.on('focus', (e) => {
        let controller;
        isFocus = true;

        controller && controller.abort();
        controller = new AbortController();
        tagifyTenLop.loading(true).dropdown.hide.call(tagifyTenLop);
        let valueInput = inputTenLop.getAttribute("value");
        TenLop = valueInput;
        $.ajax({
            url: '/Lop/Search?tenlop=' + valueInput + '&tengv=' + TenGV + '&mahp=' + MaHP,
            type: 'GET',
            success: function (data) {
                if (isFocus === true) {
                    tagifyTenLop.settings.whitelist = [];
                    tagifyTenLop.settings.whitelist.splice(0, data.length, ...data);
                    tagifyTenLop.loading(false).dropdown.show.call(tagifyTenLop);
                }
            },
            error: function () {
                tagifyTenLop.loading(false).dropdown.hide.call(tagifyTenLop);
            }
        });
    });
    tagifyTenLop.on('remove', (e) => {
        TenLop = "";
        inputTenLop.setAttribute("value", "");
    });
    tagifyTenLop.on('input', (e) => {
        let value = e.detail.value, controller;
        TenLop = value;
        inputTenLop.setAttribute("value", value);

        isFocus = true;

        controller && controller.abort();
        controller = new AbortController();
        tagifyTenLop.loading(true).dropdown.hide.call(tagifyTenLop);

        $.ajax({
            url: '/Lop/Search?tenlop=' + value + '&tengv=' + TenGV + '&mahp=' + MaHP,
            type: 'GET',
            success: function (data) {
                if (isFocus === true) {
                    tagifyTenLop.settings.whitelist = [];
                    tagifyTenLop.settings.whitelist.splice(0, data.length, ...data);
                    tagifyTenLop.loading(false).dropdown.show.call(tagifyTenLop);
                }
            },
            error: function () {
                tagifyTenLop.loading(false).dropdown.hide.call(tagifyTenLop);
            }
        });
    });
    tagifyTenLop.on('add', (e) => {
        TenLop = e.detail.data.value;
        inputTenLop.setAttribute("value", e.detail.data.value);
    });
</script>

